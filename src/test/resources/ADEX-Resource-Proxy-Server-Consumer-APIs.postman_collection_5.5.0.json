{
	"info": {
		"_postman_id": "a4127943-5452-4aea-a843-701ffd05d29b",
		"name": "TEST-SERVER-ADEXX-RS-PROXY-APIs Final NEW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Tokens",
			"item": [
				{
					"name": "Get Personal Resource Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"personalResourceToken_pune\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"b58da193-23d9-43eb-b98a-a103d4b6103c\", \n  \"itemType\": \"resource\",\n  \"role\": \"consumer\",\n  \"context\": {\n        \"ppbNumber\": \"{{ppbNumber}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Personal Resource Token(surat)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"personalResourceToken_surat\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\", \n  \"itemType\": \"resource\",\n  \"role\": \"consumer\",\n  \"context\": {\n        \"ppbNumber\": \"{{ppbNumber}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Open Consumer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"openConsumerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"gateway.adex.iudx.io\", \n  \"itemType\": \"resource_server\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/auth/v1/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Spatial Search",
			"item": [
				{
					"name": "200 (success) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]&offset=0&limit=10&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (circle) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]&offset=0&limit=10&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=1&geometry=Point&coordinates=[31.178,72.834]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=1"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[31.178,72.834]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=near;maxDistance=1000&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=1000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]&q=Ppbno=={{ppbNumber}}&offset=0&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    // pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,21.2],[72.8297,21.15]]&q=Ppbno=={{ppbNumber}}&offset=0&limit=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,21.2],[72.8297,21.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.84,21.19],[72.84,21.17]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.84,21.19],[72.84,21.17]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "offset",
									"value": "5",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Spatial Search Count",
			"item": [
				{
					"name": "200 (success) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]&offset=0&limit=10&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (circle) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]&offset=0&limit=10&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    // pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=1&geometry=Point&coordinates=[31.178,72.834]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=1"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[31.178,72.834]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=near;maxDistance=1000&geometry=Point&coordinates=[21.178,72.834]&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=1000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    // pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,21.2],[72.8297,21.15]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,21.2],[72.8297,21.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[72.8296,31.2],[72.8297,31.15]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.84,21.19],[72.84,21.17]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.84,21.19],[72.84,21.17]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georelation",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce830&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce830"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "linestring"
								},
								{
									"key": "coordinates",
									"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Temporal Count",
			"item": [
				{
					"name": "200 (success) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJpc3MiOiJjb3MuaXVkeC5pbyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0.eyJzdWIiOiJmZDQ3NDg2Yi0zNDk3LTQyNDgtYWMxZS0wODJlNGQzN2E2NmMiLCJpc3MiOiJjb3MuaXVkeC5pbyIsImF1ZCI6InJzLml1ZHguaW8iLCJleHAiOjE3MTExNjAxMDQsImlhdCI6MTcxMTExNjkwNCwiaWlkIjoicmk6YjU4ZGExOTMtMjNkOS00M2ViLWI5OGEtYTEwM2Q0YjYxMDNjIiwicm9sZSI6ImNvbnN1bWVyIiwiY29ucyI6eyJhY2Nlc3MiOlsiYXBpIiwic3ViIiwiZmlsZSIsImFzeW5jIl19LCJyZyI6IjViNzU1NmI1LTA3NzktNGM0Ny05Y2YyLTNmMjA5Nzc5YWEyMiJ9.uFVU71b7l51iueZLIVJBnU0r2JdsgfJVkevTWIHx56NQWR-dvyCHYYMBj7pblGx91PVpr07lo-M4AF-5UiPaTw",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-10-18T14:20:00Z&endtime=2020-10-20T14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-20T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (between) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_pune}}"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-10-18T14:20:00Z&endtime=2020-10-19T14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_pune}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-01-18T14:20:00Z&endtime=2020-01-19T14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-01-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-01-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerelation",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-09-18XX14:20:00Z&endtime=2020-09-19XX14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18XX14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19XX14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-10-19T12:00:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T12:00:00Z"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-01-19T12:00:00Z&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-01-19T12:00:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid params) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&timeattribute=2020-09-19T12:00:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "timeattribute",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-09-19XX12:00:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19XX12:00:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=before&time=2020-09-19T12:00:00Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=before&time=2020-09-19T12:00:00Z&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-10-18T14:20:01Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-01-18T14:20:01Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-01-18T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalid param) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=after&time=2020-06-01T14:20:01Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerelation",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalid date format) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-06-01XX14:20:01Z&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01XX14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=after&time=2020-06-01T14:20:01Z&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (Invalid credentials) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=after&time=2020-06-01T14:20:01Z&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Temporal Search",
			"item": [
				{
					"name": "200 (success) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_pune}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-10-18T14:20:00Z&endtime=2020-10-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (between) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_pune}}"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-10-18T14:20:00Z&endtime=2020-10-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_pune}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-01-18T14:20:00Z&endtime=2020-01-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-01-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-01-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerelation",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-09-18XX14:20:00Z&endtime=2020-09-19XX14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18XX14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19XX14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-10-19T12:00:00Z&q=Ppbno=={{ppbNumber}}&offset=0&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T12:00:00Z"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-01-19T12:00:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-01-19T12:00:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid params) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&timeattribute=2020-09-19T12:00:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "timeattribute",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-09-19XX12:00:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19XX12:00:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=before&time=2020-09-19T12:00:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (invalid credentials) temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=before&time=2020-09-19T12:00:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T12:00:00Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-10-18T14:20:01Z&q=Ppbno=={{ppbNumber}}&offset=10&limit=30",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "offset",
									"value": "10"
								},
								{
									"key": "limit",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-01-18T14:20:01Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-01-18T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalid param) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=after&time=2020-06-01T14:20:01Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerelation",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalid date format) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-06-01XX14:20:01Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01XX14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=after&time=2020-06-01T14:20:01Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (Invalid credentials) temporal (after)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=after&time=2020-06-01T14:20:01Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "after"
								},
								{
									"key": "time",
									"value": "2020-06-01T14:20:01Z"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Attribute Count",
			"item": [
				{
					"name": "200 (success) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute > with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>150.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103&q1=referenceLevel>>150.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103"
								},
								{
									"key": "q1",
									"value": "referenceLevel>>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>150.0&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401(not authorized) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>30.0&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed>30.0"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>>150.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<16.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<16.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<1.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103&q1=referenceLevel<1.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103"
								},
								{
									"key": "q1",
									"value": "referenceLevel<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<1.0&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel<1.0"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<500&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed<500"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<<1.0;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=15.9;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=150;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>=150;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response",
									"var jsonData = pm.response.json(); ",
									"tests[\"Validate response\"] = jsonData.title === \"Bad Request\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?idd=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>=15.9;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "idd",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q1",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101d&q=referenceLevel>=15.9;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101d"
								},
								{
									"key": "q",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>=50&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed>=50"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<>=50;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<>=50;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.9;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=1;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=1;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?ida=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<=1&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "ida",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q1",
									"value": "referenceLevel<=1"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<=1&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=1"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<=50&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed<=50"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<>=1;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<>=1;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) multi attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;currentLevel==1.01;measuredDistance>=14.89;Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;currentLevel==1.01;measuredDistance>=14.89;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Attribute Search",
			"item": [
				{
					"name": "200 (success) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&offset=10&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute > with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&offset=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>150.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103&q1=referenceLevel>>150.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103"
								},
								{
									"key": "q1",
									"value": "referenceLevel>>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>150.0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401(not authorized) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>30.0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed>30.0"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute >",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>>150.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<16.0;Ppbno=={{ppbNumber}}&offset=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<16.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<1.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103&q1=referenceLevel<1.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103"
								},
								{
									"key": "q1",
									"value": "referenceLevel<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<1.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<500",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed<500"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute <",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<<1.0;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<<1.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=15.9;Ppbno=={{ppbNumber}}&offset=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=150;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>=150;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response",
									"var jsonData = pm.response.json(); ",
									"tests[\"Validate response\"] = jsonData.title === \"Bad Request\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?idd=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>=15.9;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "idd",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q1",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>=15.9;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel>=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed>=50"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute >=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<>=50;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<>=50;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.9;Ppbno=={{ppbNumber}}&offset=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=15.9;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=1;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=1;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?ida=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "ida",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q1",
									"value": "referenceLevel<=1"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel<=1"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed<=50"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator) attribute <=",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<>=1;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel<>=1;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) multi attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;currentLevel==1.01;measuredDistance>=14.89;Ppbno=={{ppbNumber}}&offset=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;currentLevel==1.01;measuredDistance>=14.89;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Filter",
			"item": [
				{
					"name": "200 (success) attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) attribute > with filter and optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>150.0&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params)attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>150.0;Ppbno=={{ppbNumber}}&attributes=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attributes",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid operator)attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>>150.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>>150.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found)attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized)attribute > with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>30.0&attrs=id,location,speed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "q",
									"value": "speed>30.0"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) temporal (between) with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-10-18T14:20:00Z&endtime=2020-10-19T14:20:00Z&attrs=id,currentLevel,referenceLevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-10-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-19T14:20:00Z"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) temporal (between) with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-01-18T14:20:00Z&endtime=2020-01-19T14:20:00Z&attrs=id,currentLevel,referenceLevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-01-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-01-19T14:20:00Z"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (between) with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-09-18X14:20:00Z&endtime=2020-09-19X14:20:00Z&attrs=id,currentLevel,referenceLevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18X14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19X14:20:00Z"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) temporal (between) with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) temporal (between) with filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&attrs=id,speed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "attrs",
									"value": "id,speed"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Complex Search",
			"item": [
				{
					"name": "200 (success) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-10-19T14:00:00Z&attrs=id,referencelevel,currentlevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Search - circle geom + temporal before + response filter with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-10-19T14:00:00Z&attrs=id,referencelevel,currentlevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "options",
									"value": "count",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[31.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,referencelevel,currentlevel&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[31.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geo=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geo",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid geometry type) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=PointB&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "PointB"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce83d&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce83d"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid Operator) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=speed<<500;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "speed<<500;Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid Data format) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19X14:00:00X&attrs=id,location,speed&q=speed<<500;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19X14:00:00X"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "speed<<500;Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Complex Count",
			"item": [
				{
					"name": "200 (success) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-10-19T14:00:00Z&attrs=id,referencelevel,currentlevel&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Search - circle geom + temporal before + response filter with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-10-19T14:00:00Z&attrs=id,referencelevel,currentlevel&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-10-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[31.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,referencelevel,currentlevel&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[31.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,referencelevel,currentlevel"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geo=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}&options=count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geo",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								},
								{
									"key": "options",
									"value": "count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid geometry type) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=PointB&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "PointB"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce83c&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce83c"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid Operator) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19T14:00:00Z&attrs=id,location,speed&q=speed<<500;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19T14:00:00Z"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "speed<<500;Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid Data format) - Search - circle geom + temporal before + response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=100&geometry=Point&coordinates=[21.178,72.834]&timerel=before&time=2020-09-19X14:00:00X&attrs=id,location,speed&q=speed<<500;Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=100"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "timerel",
									"value": "before"
								},
								{
									"key": "time",
									"value": "2020-09-19X14:00:00X"
								},
								{
									"key": "attrs",
									"value": "id,location,speed"
								},
								{
									"key": "q",
									"value": "speed<<500;Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "validations",
			"item": [
				{
					"name": "400 (Bad request) invalid id length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - Invalid geo property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=place&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "place"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - empty geo property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": ""
								},
								{
									"key": "georel",
									"value": "near;maxdistance=10"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid georel",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=beyond&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "beyond"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - empty georel",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": ""
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid max distance",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100000000&geometry=Point&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100000000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid geometry",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=ellipse&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": "ellipse"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - empty geometry",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=&coordinates=[21.178,72.834]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": ""
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid coordinates format for point",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=point&coordinates=[21.178,72.834,23.56789]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834,23.56789]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid coordinates precision format >6",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=point&coordinates=[21.178,72.8341234]",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.8341234]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - invalid options param value",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=point&coordinates=[21.178,72.834]&options=total",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "options",
									"value": "total"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad Request) - empty options param value",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{secureResourceToken}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=100&geometry=point&coordinates=[21.178,72.834]&options=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "near;maxdistance=100"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[21.178,72.834]"
								},
								{
									"key": "options",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) invalid timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=beyond&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "beyond"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) no endtime for during",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-09-18T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-18T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z",
									"disabled": true
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) invalid interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 400 (Bad request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=during&time=2020-09-01T14:20:00Z&endtime=2020-09-19T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-09-01T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-09-19T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) invalid operator in <q> query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>/15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>/15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) invalid number of attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevel,attr1,atte2,attr3,attr4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevel,attr1,atte2,attr3,attr4"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) invalid attribute length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0;Ppbno=={{ppbNumber}}&attrs=id,currentLevel,referenceLevelW45soq9yt0acejbMxwggziMSK8e7FsfylXQH3b5jDVXl6IQma7Ak6hfqlUldp3lf6K11Z0F2jJwm2cDC8lzxQ3KetN3dgn01Gv7G",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "q",
									"value": "referenceLevel>15.0;Ppbno=={{ppbNumber}}"
								},
								{
									"key": "attrs",
									"value": "id,currentLevel,referenceLevelW45soq9yt0acejbMxwggziMSK8e7FsfylXQH3b5jDVXl6IQma7Ak6hfqlUldp3lf6K11Z0F2jJwm2cDC8lzxQ3KetN3dgn01Gv7G"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumer-Audit-Api",
			"item": [
				{
					"name": "200 (success) Get Data Read Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openConsumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2024-02-10T14:20:00Z&endTime=2024-02-15T14:20:00Z&api=/{{basePath}}/entities&limit=1500&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2024-02-10T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2024-02-15T14:20:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "limit",
									"value": "1500"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "q",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) Get Data Count Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"successful operations\");",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(resultsjsonData).to.have.property(\"total\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2024-02-10T14:20:00Z&endTime=2024-02-16T14:20:00Z&api=/{{basePath}}/entities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2024-02-10T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2024-02-16T14:20:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (success) Get Data Count Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"     pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2020-07-01T14:20:00Z&endTime=2020-07-02T14:20:00Z&api=/{{basePath}}/entities&options=count&limit=1000&offset=0&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2020-07-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-07-02T14:20:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "limit",
									"value": "1000"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (failure) Invalid date-interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2022-07-01T14:20:00Z&endTime=2022-06-15T15:23:00Z&api=/{{basePath}}/entities&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2022-07-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2022-06-15T15:23:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (failure) Missing time-relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&time=2022-07-01T14:20:00Z&endTime=2022-08-15T15:23:00Z&api=/{{basePath}}/entities&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "time",
									"value": "2022-07-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2022-08-15T15:23:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (failure) invalid-parameter empty-response read query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&time=2022-07-01T14:20:00Z&endTime=2022-08-15T15:23:00Z&api=/{{basePath}}/entities&options=count&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "time",
									"value": "2022-07-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2022-08-15T15:23:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								},
								{
									"key": "options",
									"value": "count"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) Get Data Read Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2022-05-01T14:20:00Z&endTime=2022-05-10T15:23:00Z&api=/{{basePath}}/entities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2022-05-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2022-05-10T15:23:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) Get Data Count Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abcd",
								"type": "text"
							},
							{
								"key": "options",
								"value": "count",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/consumer/audit?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=during&time=2022-05-01T14:20:00Z&endTime=2022-05-10T15:23:00Z&api=/{{basePath}}/entities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"consumer",
								"audit"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "timerel",
									"value": "during"
								},
								{
									"key": "time",
									"value": "2022-05-01T14:20:00Z"
								},
								{
									"key": "endTime",
									"value": "2022-05-10T15:23:00Z"
								},
								{
									"key": "api",
									"value": "/{{basePath}}/entities"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Complex Search (Post queries)",
			"item": [
				{
					"name": "200 (success) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (circle) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [31.178,72.834],\n        \"georel\": \"near;maxDistance=10\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQuery\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-10-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{subscriptionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2021-12-01T14:20:00Z\",\n        \"endtime\": \"2021-12-01T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18Z14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19z14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-10-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2021-12-18T14:20:00Z\",\n        \"endtime\": \"2021-12-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params)  - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQuery\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found)  - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized ) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,31],[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30],[72.719,31]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,31.2],[72.8297,31.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce831\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.833994,21.17798],[72.833978,21.178005]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georelation\": \"intersects\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Complex Count (Post queries)",
			"item": [
				{
					"name": "200 (success) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (circle) with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [31.178,72.834],\n        \"georel\": \"near;maxDistance=10\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQuery\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (circle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-10-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{subscriptionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2021-12-01T14:20:00Z\",\n        \"endtime\": \"2021-12-01T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid param) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "abc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) temporal (between)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18Z14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid date format) - temporal (before)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19z14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\",\n    \"q\": \"Ppbno=={{ppbNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-10-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2021-12-18T14:20:00Z\",\n        \"endtime\": \"2021-12-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params)  - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQuery\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0;Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found)  - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized ) - complex - geo - (circle) + temporal (between) + attribute (>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/temporal/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"temporal",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,31],[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30],[72.719,31]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,31.2],[72.8297,31.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce831\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (bbox)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.833994,21.17798],[72.833978,21.178005]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 (Empty Response) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 204 (no Content)\", function () {",
									"    // pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid params) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request Data)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georelation\": \"intersects\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"q\":\"Ppbno=={{ppbNumber}}\",\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{personalResourceToken_surat}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce830\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) - Geo-Query (linestring)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "abc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{basePath}}/entityOperations/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"entityOperations",
								"query"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Async Search",
			"item": [
				{
					"name": "201 (Success) Async Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"searchId\");\r",
									"    const searchID = resultsjsonData.searchId;\r",
									"    pm.globals.set(\"searchID\",searchID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "201 (Sucess) Async Search(Polygon)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"searchId\");\r",
									"    const searchID = resultsjsonData.searchId;\r",
									"    pm.globals.set(\"searchID\",searchID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_surat}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]&time=2024-03-01T14:20:00Z&endtime=2024-04-21T14:20:00Z&timerel=between&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.78,21.15],[72.76,21.15]]]"
								},
								{
									"key": "time",
									"value": "2024-03-01T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2024-04-21T14:20:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "201 (Success) Async Searcch Spatial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"searchId\");\r",
									"    const searchID = resultsjsonData.searchId;\r",
									"    pm.globals.set(\"searchID\",searchID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "201 (Success) Async Search with csv format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"searchId\");\r",
									"    const searchID = resultsjsonData.searchId;\r",
									"    pm.globals.set(\"searchID\",searchID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							},
							{
								"key": "format",
								"value": "csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "201 (Success) Async Search with optional encryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"searchId\");\r",
									"    const searchID = resultsjsonData.searchId;\r",
									"    pm.globals.set(\"searchID\",searchID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							},
							{
								"key": "publicKey",
								"value": "{{publicKeyValue}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Bad request) Async Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z&q=Ppbno=={{ppbNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between",
									"disabled": true
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								},
								{
									"key": "q",
									"value": "Ppbno=={{ppbNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) Async Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) Async Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/search?id=b58da193-23d9-43eb-b98a-a103d4b6103e&timerel=between&time=2020-10-10T14:20:00Z&endtime=2020-10-13T14:20:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103e"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2020-10-10T14:20:00Z"
								},
								{
									"key": "endtime",
									"value": "2020-10-13T14:20:00Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Async Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:rs:success\");\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"    pm.expect(body).to.have.property(\"results\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"     pm.expect(resultsjsonData).to.have.property(\"status\");\r",
									"    const status = resultsjsonData.status;\r",
									"    pm.expect(status).to.be.oneOf(['IN_PROGRESS','COMPLETE','ERROR','SUBMITTED']);\r",
									"    if(status === 'ready') {\r",
									"        pm.expect(resultsjsonData).to.have.property(\"file-download-url\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{personalResourceToken_pune}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{basePath}}/async/status?searchID={{searchID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{basePath}}",
								"async",
								"status"
							],
							"query": [
								{
									"key": "searchID",
									"value": "{{searchID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": ""
		},
		{
			"key": "streaming-alias",
			"value": "alias-name"
		},
		{
			"key": "id",
			"value": "datakaveri.org/3ae88e7ba006938ffc38203d326b1711b892226d/rs.iudx.io/aqmtesting"
		},
		{
			"key": "publicKeyValue",
			"value": ""
		},
		{
			"key": "dxAuthBasePath",
			"value": ""
		}
	]
}